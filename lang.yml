-
  - 가비지 컬렉션이란?
  - |
    현재 참조되지 않는 객체를 메모리에서 제거하는 메모리 관리 기법

    기본적으로 모든 객체를 순회하며 제거하기만, 효율을 위해 이것보다 성능적으로 개선된 알고리즘이 있다

    # Generation GC

    생성되지 얼마 되지 않은 객체는 얼마 가지 않아 사용되지 않는다는 경향을 바탕으로 구현된 GC

    Young Generation과 Old Generation 그리고 Metasapce로 구성되어 있으며
    
    Young Generation은 생성되지 얼마 되지 않은 객체를

    Old Generation은 생성된 후 일정 시간이 지난 이후의 객체를

    Metaspace는 Class 및 Method의 metadata를 보관하는 공간을 의미

    # 동작

    Generation GC의 동작은 다음과 같다

    1. 방금 생성된 객체는 Young Generation으로 이동
    2. 이후 Garbage Collection을 진행하며 각 객체에 age를 매기고
    3. 일정 수치의 age가 넘어간 객체는 Old Generation으로 이동시켜 관리

    이를 통해 모든 객체를 순회하지 않고, 일부 객체에 대해서만 GC를 진행할 수 있도록 알고리즘의 구현이 가능하게 됨

    즉, 기존의 방법보다 효율적인 GC의 구현이 가능하게 됨

-
  - Vector와 ArrayList의 차이를 말해보세요
  - |
    # Vector

    Vector는 동기식으로 동작함

    다시말해, 하나의 스레드가 어떤 vector 객체에서 작업중이라면

    다른 스레드는 해당 vector 객체에 접근할 수 없다는 것을 의미함

    # ArrayList

    ArrayList는 이와는 달리 비동기식으로 동작함

    하나의 스레드가 어떤 ArrayList 객체에서 작업중이어도

    다른 스레드 역시 해당 ArrayList 객체에 접근할 수 있다는 것을 의미함

-
  - String과 StringBuffer의 차이를 말해보세요
  - |
    # String

    `String` 객체는 immutable

    즉, 기존의 `String`을 수정한다면 새로운 `String` 객체를 생성해야 한다는 것을 의미

    # StringBuffer

    `StringBuffer` 객체는 mutable하다

    기존의 객체를 이용해 수정이 가능하며, 이것이 `String`과의 차이

-
  - Serialization이란?
  - |
    객체의 상태를 기록할 수 있도록 어떠한 포맷으로 변환하는 작업을 의미함

    가령 js의 `JSON.stringify()`와 `JSON.parse()`를 예로 들 수 있는데

    이를 이용해 객체의 특정한 상태를 저장할 수 있다

-
  - Java의 메모리 영역을 설명해보세요
  - |
    Java의 메모리 영역은 Heap, Stack, Method 세 가지로 구분됨

    * Method: Bytecode, Global variables, Static variables
    * Stack: Arguments, Local variables
    * Heap: Instances

-
  - Overload와 Override의 차이는 무엇인가요?
  - |
    # Overload는

    메서드의 이름만 같고... 파라미터의 타입, 개수, 순서 셋 중 하나 이상이 다른 메서드
    
    이를 이용해 파라미터의 종류에 따라 다른 동작을 하도록 메서드를 구현할 수 있음

    # Override는

    메서드의 이름과 파라미터의 타입, 개수, 순서 그리고 반환 타입까지 모두 같은 메서드

    즉, Override는 '재정의'를 하는 것이라고 할 수 있음

-
  - Abstract class와 Interface의 차이
  - |
    # 추상클래스의 경우

    일부 메서드가 abstract method로 구현이 되어 있으며

    이를 하위 클래스에서 `extends` 키워드를 통해 확장받는 방식으로 구현함

    # Interface의 경우

    모든 메서드가 abstract method로 구현이 되어 있으며

    이를 하위 클래스에서 `implements` 키워드를 통해 구현해야 하고

    여러개의 interface의 구현이 가능함

-
  - Generic이란 무엇인가요?
  - |
    Type을 클래스 또는 메서드 구현 시에 정의하는 것이 아니라

    해당 class나 method를 사용할 때 정의하는 방식으로 타입을 정의하는 기법

    여기서 Generic type은 class, array와 같은 참조 자료형이나 Wrapper 클래스로 감싸진 기본 자료형이 될 수 있음

-
  - 접근 지정자를 설명해보세요
  - |
    접근 지정자는 `public`, `private`, `default`, `protected` 4개가 있으며, 각각 다음과 같음

    * `public`: 클래스 및 패키지 어느 곳에서든지 접근이 가능
    * `private`: 해당 클래스 내부에서만 접근이 가능
    * `default`: 같은 패키지 내부에서만 접근이 가능
    * `protected`: 같은 패키지 또는 상속받는 자식 클래스에서만 접근이 가능

-
  - Call by Reference와 Call by Value의 차이는 무엇이죠?
  - |
    # Call by Value는

    실제 Byte 값을 전달하는 것

    Stack에 존재하는 값을 복사하여 전달하는 것이기에, 원본의 값은 변하지 않는다는 특징이 있음

    # Call by Reference는

    메모리 Heap 영역에 위치한 주소값을 전달하는 것

    Byte 값을 전달하는 것은 동일하나, 이 값은 참조하는 객체의 주소값이기 때문에

    이를 이용하여 참조하는 객체의 값을 변경할 시 원본 객체의 값도 변경된다는 특징이 있음

-
  - Array와 Linked List의 차이는 무엇인가요
  - |
    # Array는

    시작 주소부터 순차적으로 데이터 타입의 크기 단위로 공간을 차지하기에

    정의한 이후에는 크기의 변경이 불가능함

    # Linked List는

    노드 단위로 이루어져 있으며, 노드에는 앞과 뒤 노드를 가리키는 포인터가 존재함

    포인터를 이용해 각각의 노드를 참조하기에 크기의 변경이 가능하고
    
    중간에 elements를 추가하거나 삭제할 때에도 속도가 빠르지만

    인덱스를 이용해 참조하는 경우에는 포인터를 통해 해당 노드까지 타고 들어가야 하니 Array보다 느린 속도를 보임

-
  - Hash란 무엇인가요?
  - |
    좀 더 효율적인 객체의 참조를 위해

    실제 객체가 아니라 객체 단위로 서로 겹치지 않는, 객체와 연관된 값을 부여한 뒤

    이를 이용해 객체를 참조하도록 하는 기법

-
  - Java 컴파일 과정을 설명해보세요
  - |
    1. Java 컴파일러를 통해 Source code를 Bytecode로 변환
    1. 이후 Bytecode를 실제 명령어로 변환하는 작업을 하는데, 이 작업은 JVM에서 처리하게 됨

    이전에는 JVM이 bytecode 실행 시마다 interpret하여 명령을 실행하는 방식을 이용했으나

    이후 JIT 컴파일러를 이용해 실제 실행할 때 interpret하고, 이후 해당 명령을 재사용하는 기법을 이용하여 좀 더 효율적으로 컴파일을 진행함

    이 JVM이 Bytecode를 CPU에 알맞은 명령어로 알아서 변환해주기에, 하나의 소스 코드로 다양한 시스템에서 동작할 수 있게 됨

-
  - CPP 실행 과정을 설명해보세요
  - |
    네 가지 과정을 거쳐 코드가 실행되게 됨

    1. preprocess: `#include`와 같은 지시자를 해석하게 됨
    1. compile: 코드를 asm으로 컴파일링하게 됨
    1. assemble: asm을 obj 파일, 즉 기계어로 번역하게 됨
    1. linking: 참조되는 다른 obj 파일이나 라이브러리를 엮어 execute 파일로 만듦

    linking 과정까지 끝마쳤으면 실제로 컴퓨터에서 실행할 수 있는 파일이 나오며, 이를 실행하여 코드가 실행되게 됨

-
  - 메모리 성능을 개선하기 위해서는 어떤 방법이 좋을까요?
  - |
    먼저 코드상으로 메모리 누수가 되는 부분이 있는지 확인함

    다음으로, 클래스의 instance는 꼭 필요한 경우에만 사용하고, 그렇지 않은 경우에는 `static`으로 선언하여 사용하도록 함

    인스턴스가 필요한 경우에도 얼마나 인스턴스가 필요한지 생각해볼 수 있겠는데, 가령 하나의 인스턴스만 필요하다면 singleton pattern을 이용해 하나의 인스턴스만을 이용하도록 구현할 수 있을 것임

-
  - class와 structure의 차이는 무엇인가요?
  - |
    둘 다 field를 갖는 것은 동일하나,

    구조체의 경우에는 다른 데이터 타입을 하나의 데이터 타입으로 묶어서 사용하도록 한 것이고

    클래스는 데이터 타입뿐만 아니라 메서드까지 묶어서 하나의 데이터 타입으로 묶어서 사용할 수 있도록 한 것의 차이를 가짐

    물론 구조체 역시 pointer를 이용해 함수를 가리키도록 할 수 있으나, 이건 메서드가 아니라 그냥 함수일 뿐임

-
  - thread는 어떤 방식으로 생성하나요? 그리고 장단점이 있을까요?
  - |
    user level thread의 경우 kernel level thread에서 fork하는 방식으로 스레드를 생성함

    스레드를 사용하면 병렬(parallel)까지는 아니지만 동시(concurrent)에 여러 작업을 처리할 수 있다는 장점이 있으나

    하나의 스레드가 멈춘다면 다른 스레드 또한 영향을 받아 멈춘다는 단점이 있음

-
  - pointer를 설명해보세요
  - |
    메모리상의 어떠한 위치를 가리키는 주소값임

    가령 집을 예로 들어보자면, 집마다 호수가 있고 호수를 통해 집을 특정할 수 있는데

    이 때 집의 호수가 pointer라고 할 수 있겠음
