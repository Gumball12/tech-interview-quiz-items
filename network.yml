-
  - OSI 7계층을 설명해보세요
  - |
    # OSI 7계층

    먼저 OSI 7계층이란

    네트워크 통신에 있어 사용 목적에 따라 7개의 layer로 분리한 국제 표준 통신 규약임

    물리, 데이터링크, 네트워크, 전송, 세션, 표현, 응용 7개의 layer가 존재하여 각각 다음과 같은 목적을 갖고 있음

    ### 물리 계층

    먼저 물리 계층은 실제 데이터가 전송되는 계층이며

    허브 같은 장비가 이 계층에 위치함

    ### 데이터링크

    다음으로 데이터링크 계층은 MAC을 이용해 데이터 송수신을 제어하는 계층으로써
    
    에러검출, 재전송, 흐름제어를 통해 송수신을 제어함

    스위치와 같은 장비가 이 계층에 위치함

    ### 네트워크

    네트워크 계층은 IP를 이용해 host를 판별하고, 이를 기반으로 routing을 하는 계층으로써

    흐름제어를 담당하고 있음

    라우터가 이 계층에 위치하고 있고

    ### 전송

    전송 계층은 프로세스간 세부적인 통신을 처리하기 위해 존재하는 계층으로써

    TCP, UDP와 같은 프로토콜이 이 계층에 위치하고 있음

    ### 세션

    다음으로 세션 계층의 경우, 실제 데이터 통신을 위한 논리적인 연결 부분을 담당하고 있는 계층이며

    Socket을 이용해 지속적으로 TCP Session을 붙잡아 두는 등의 처리를 여기서 담당하고 있음

    ### 표현

    표현 계층의 경우 JEPG, MPEG과 같은 데이터의 암호화 및 복호화를 담당하는 계층임

    ### 응용

    마지막으로 응용 계층은

    네트워크를 이용한 실제 서비스 제공 및 처리를 위한 계층임

-
  - TCP/IP 계층을 설명해보세요
  - |
    TCP/IP는 4개의 계층으로 구성되어 있으며

    각각 Network Access, Internet, Transport, Application 계층이 위치하고 있음

    # Network Access

    실제 데이터 전송과 MAC을 이용한 흐름제어, 오류정정, 에러검출과 같은 처리를 담당하고 있는 계층

    # Internet

    IP를 이용한 라우팅 및 흐름제어와 같은 처리를 담당하고 있는 계층

    # Transport

    TCP 및 UDP를 이용해 패킷을 전송하거나 제어하는 계층

    # Application

    네트워크를 통해 송수신받은 데이터를 실질적으로 표현하는 계층

    # OSI 7계층과의 차이

    이 네 개의 계층은 기존의 OSI 7계층보다는 구조가 간략하기에 구현에 있어 편리함이 조금 더 높아지지만

    호환성이 요구되는 경우에는 표준 모델인 OSI 7계층을 따르는 것이 맞다고 생각함

-
  - 3-way handshake를 설명해보세요
  - |
    TCP는 신뢰적인 데이터 통신을 위해 실제 연결 전 3 번의 handshake 과정을 거침

    이를 3-way handshake라고 하며 안정적인 데이터 송수신을 할 수 있게끔 함

    # 순서

    (1) client hello를 통해 server에게 연결을 요청하는데

    이 때 Synchronization, SYN flag와 함께 임의의 난수를 sequence로 함께 전송함

    (2) server는 이에 대한 ACK flag와 함께 SYN flag를 전송함

    ACK flag의 sequence로는 앞서 client에서 보냈던 SYN flag의 sequence에 1을 더한 값이 들어가며

    SYN flag의 sequence로는 임의의 난수를 붙여 전송하게 됨

    (3) 마지막으로 client가 server의 SYN flag에 대한 ACK flag를 전송함으로써 handshake 과정을 마치게 되는데

    ACK flag의 sequence로 SYN flag의 sequence의 값에 1을 더한 값을 전송하게 됨

    # 정리하자면

    이 모든 과정이 정상적으로 이루어져야 server와 client 사이의 데이터 송수신이 시작되게 되는 것임

    과정을 간단히 말하자면 client hello로 시작하게 되며

    SYN, ACK + SYN, ACK로 handshake 과정이 진행된다고 할 수 있겠음

-
  - TCP 4-way handshake는 무엇인가요
  - |
    데이터 송수신을 위해 진행했던 3-way handshake와는 달리

    연결 종료를 위해 진행하는 handshake 과정

    # 과정

    과정은 다음과 같음

    (1) 먼저 client의 FIN flag로 handshake가 시작됨

    (2) 이후 server는 이에 대한 ACK flag를 전송함과 함께

    미처 아직 전송하지 못한 데이터가 있는지 여부를 확인함

    만약 존재한다면 이를 전송하게 되고

    (3) 다음으로 서버에서도 연결을 종료하겠다는 의미인 FIN flag를 전송하게 됨

    (4) 마지막으로 client가 FIN flag에 대한 ACK flag를 전송하게 되고 연결을 마치게 됨

-
  - 흐름 제어와 혼잡 제어에 대해 들어보셨나요?
  - |
    reliable한 데이터 전송을 보장해야만 하는 TCP는 이를 위해 데이터 전송에서의 흐름과 혼잡을 제어해야만 함

    # 흐름 제어

    먼저 흐름 제어는 송신측과 수신측 사이에서의 데이터 처리 속도를 조절하는 기법임

    수신측에서 데이터를 처리하고, 이에 대한 feedback을 송신측으로 전달하여

    송신측에서의 데이터 전송 크기를 조절하는 방식으로 진행되게 됨

    # 혼잡 제어

    다음으로 혼잡 제어는 송신측과 네트워크 사이에서의 데이터 처리 속도를 조절하는 기법임

    송신측에서는 송신 결과를 통해 네트워크의 상태를 판별하고, 이에 따라 전송하는 데이터의 크기를 조절하는 방식으로 진행됨

    # window size

    이 두 개의 제어 방식 모두 window라는 버퍼를 이용하는데

    window의 size만큼 데이터를 전송하게 되고, 이를 늘리거나 줄이는 방식으로 전송하는 데이터의 크기를 조절하는 방식임

-
  - UDP란?
  - |
    신뢰적인 프로토콜인 TCP는 신뢰성을 보장하기 위해 handshake 과정 및 여러가지 flag를 header에 담아두고 있음

    이에 따라 전송 속도가 느리고 크기 또한 커지게 되는데

    UDP같은 경우는 이러한 과정이나 flag 없이, 즉 신뢰성을 보장하지 않고 그냥 데이터를 전송한다는 특징이 있는 프로토콜임

    상대적으로 TCP보다야 속도가 빠르겠지만 비신뢰적이기에 application layer에서 이를 보정하는 로직이 요구됨

    그래도 속도가 빠르다는 장점으로 인해 http version 3인 QUIC과 같이

    TCP를 대체하기 위해 사용되는 등 현재까지도 활발하게 사용되고 있는 프로토콜임

-
  - HTTP와 HTTPS의 차이를 말씀해보세요
  - |
    Transport Layer Security, TLS를 사용하는지 아닌지에 차이가 있음

    HTTP는 pure text를 그대로 전송하는데에 반해

    HTTPS는 데이터를 암호화하여 전송한다는 차이가 있음

    # TLS Handshake

    이 때문에 handshake 과정에서 기존과 약간 차이가 있음

    (1) client hello를 통해 server에게 연결을 요청하는데

    이 때 사용할 암호화 방식과 함께 어떤 난수를 하나 같이 전송하게 됨

    (2) 이후 server는 이에 대한 server hello와 함께

    암호화 방식을 확정하고 마찬가지로 난수를 하나 client로 보내게 되며

    추가적으로 server의 인증서를 함께 client에게 전송함

    (3) 이후 client는 Certification Authority, CA의 공개키를 이용하여 인증서를 확인하게 됨

    정상적이라면 요청한 서버가 맞음을 보증하게 되고

    암호화를 위한 키를 생성하게 됨

    (4) 키는 앞서 client와 server 양쪽에서 생성했던 난수를 이용함

    이를 통해 pre-master secret이라는 이름의 키를 생성하게 되는데

    이 키를 이용해 양쪽에서 암호화를 진행하기에, 서버의 공개키를 이용해 암호화한 뒤 서버에게 전송

    (5) 마지막으로 서버는 암호화된 pre-master secret을 자신의 비밀키로 복호화한 뒤

    이를 이용하여 암호화 통신을 진행함

-
  - GET과 POST는 어떤 차이가 있나요
  - |
    둘 다 Resource Request라는 공통점이 있으나 그 목적과 구조에서 차이가 있음

    # GET

    GET같은 경우는 URL만을 이용해 Request Parameter를 전달하는 방식

    길이에 제한이 있을 뿐 아니라 데이터가 직접적으로 노출될 위험이 있기에

    데이터 전송보다는 Read에 목적을 두고 있음

    # POST

    HTTP Body를 이용해 데이터를 전송하기에 직접적으로 노출될 염려가 없으며 길이 또한 제한이 없음

    따라서 POST Method의 경우 데이터 전송에 목적이 맞춰져 있음

-
  - 라우터와 스위치는 어떤 차이가 있나요?
  - |
    둘 다 데이터 송수신을 위해 사용하는 장치이나, Layer에서부터 그 차이가 있음

    # 스위치

    Switch의 경우 Datalink layer에서 사용하는 장비이며

    MAC address를 이용해 Dataframe을 송수신함

    # 라우터

    Router는 Network layer에서 사용하며

    IP를 이용해 Routing table을 구성하고, 이를 기반으로 경로를 설정하여 패킷을 송수신하는 장비임
